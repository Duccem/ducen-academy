generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id           String  @id @default(uuid())
  instructorId String
  title        String  @db.Text
  subtitle     String? @db.Text
  description  String? @db.Text
  imageUrl     String? @db.Text
  price        Float?
  isPublished  Boolean @default(false)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  subCategoryId String
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])

  levelId String?
  level   Level?  @relation(fields: [levelId], references: [id])

  sections CourseSection[]

  purchases CoursePurchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([categoryId])
  @@index([subCategoryId])
  @@index([levelId])
}

model Category {
  id            String        @id @default(uuid())
  name          String
  subcategories SubCategory[]
  courses       Course[]
}

model SubCategory {
  id         String   @id @default(uuid())
  name       String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  coruses    Course[]

  @@index([categoryId])
}

model Level {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model CourseSection {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  muxData   MuxData?
  resources CourseSectionResource[]
  progress  CourseSectionProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([courseId])
}

model MuxData {
  id         String        @id @default(uuid())
  assetId    String
  playbackId String
  sectionId  String        @unique
  section    CourseSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@index([sectionId])
}

model CourseSectionResource {
  id        String        @id @default(uuid())
  name      String
  fileUrl   String
  sectionId String
  section   CourseSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt
}

model CourseSectionProgress {
  id          String        @id @default(uuid())
  studentId   String        
  sectionId   String
  section     CourseSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  isCompleted Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt

  @@index([sectionId])
  @@unique([studentId, sectionId])
}

model CoursePurchase {
  id         String   @id @default(uuid())
  customerId String   @unique
  courseId   String   @unique
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@index([courseId])
  @@unique([customerId, courseId])
}

model StripeCustomer {
  id               String   @id @default(uuid())
  stripeCustomerId String   @unique
  customerId       String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
}
